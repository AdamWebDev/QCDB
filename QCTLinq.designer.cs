#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18331
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Qualified_Contractor_Tracking
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="contractors")]
	public partial class QCTLinqDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAgreementsSigned(AgreementsSigned instance);
    partial void UpdateAgreementsSigned(AgreementsSigned instance);
    partial void DeleteAgreementsSigned(AgreementsSigned instance);
    partial void InsertContractorsPhone(ContractorsPhone instance);
    partial void UpdateContractorsPhone(ContractorsPhone instance);
    partial void DeleteContractorsPhone(ContractorsPhone instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertDivision(Division instance);
    partial void UpdateDivision(Division instance);
    partial void DeleteDivision(Division instance);
    partial void InsertInsuranceBroker(InsuranceBroker instance);
    partial void UpdateInsuranceBroker(InsuranceBroker instance);
    partial void DeleteInsuranceBroker(InsuranceBroker instance);
    partial void InsertInsuranceCompany(InsuranceCompany instance);
    partial void UpdateInsuranceCompany(InsuranceCompany instance);
    partial void DeleteInsuranceCompany(InsuranceCompany instance);
    partial void InsertLicence(Licence instance);
    partial void UpdateLicence(Licence instance);
    partial void DeleteLicence(Licence instance);
    partial void InsertlookupPhoneType(lookupPhoneType instance);
    partial void UpdatelookupPhoneType(lookupPhoneType instance);
    partial void DeletelookupPhoneType(lookupPhoneType instance);
    partial void InsertlookupTag(lookupTag instance);
    partial void UpdatelookupTag(lookupTag instance);
    partial void DeletelookupTag(lookupTag instance);
    partial void InsertPermit(Permit instance);
    partial void UpdatePermit(Permit instance);
    partial void DeletePermit(Permit instance);
    partial void InsertPolicyLimit(PolicyLimit instance);
    partial void UpdatePolicyLimit(PolicyLimit instance);
    partial void DeletePolicyLimit(PolicyLimit instance);
    partial void InsertSecurity(Security instance);
    partial void UpdateSecurity(Security instance);
    partial void DeleteSecurity(Security instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    partial void InsertTypeOfAgreement(TypeOfAgreement instance);
    partial void UpdateTypeOfAgreement(TypeOfAgreement instance);
    partial void DeleteTypeOfAgreement(TypeOfAgreement instance);
    partial void InsertTypeOfPermit(TypeOfPermit instance);
    partial void UpdateTypeOfPermit(TypeOfPermit instance);
    partial void DeleteTypeOfPermit(TypeOfPermit instance);
    partial void InsertTypeOfPolicy(TypeOfPolicy instance);
    partial void UpdateTypeOfPolicy(TypeOfPolicy instance);
    partial void DeleteTypeOfPolicy(TypeOfPolicy instance);
    partial void InsertTypeOfWSIB(TypeOfWSIB instance);
    partial void UpdateTypeOfWSIB(TypeOfWSIB instance);
    partial void DeleteTypeOfWSIB(TypeOfWSIB instance);
    partial void InsertAgreement(Agreement instance);
    partial void UpdateAgreement(Agreement instance);
    partial void DeleteAgreement(Agreement instance);
    partial void InsertInsuranceBrokerEmail(InsuranceBrokerEmail instance);
    partial void UpdateInsuranceBrokerEmail(InsuranceBrokerEmail instance);
    partial void DeleteInsuranceBrokerEmail(InsuranceBrokerEmail instance);
    partial void InsertInsurancePolicy(InsurancePolicy instance);
    partial void UpdateInsurancePolicy(InsurancePolicy instance);
    partial void DeleteInsurancePolicy(InsurancePolicy instance);
    partial void InsertInsuranceNonOwnedAuto(InsuranceNonOwnedAuto instance);
    partial void UpdateInsuranceNonOwnedAuto(InsuranceNonOwnedAuto instance);
    partial void DeleteInsuranceNonOwnedAuto(InsuranceNonOwnedAuto instance);
    partial void InsertContractor(Contractor instance);
    partial void UpdateContractor(Contractor instance);
    partial void DeleteContractor(Contractor instance);
    partial void InsertWSIB(WSIB instance);
    partial void UpdateWSIB(WSIB instance);
    partial void DeleteWSIB(WSIB instance);
    #endregion
		
		public QCTLinqDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["contractorsConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public QCTLinqDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QCTLinqDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QCTLinqDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QCTLinqDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AgreementsSigned> AgreementsSigneds
		{
			get
			{
				return this.GetTable<AgreementsSigned>();
			}
		}
		
		public System.Data.Linq.Table<ContractorsPhone> ContractorsPhones
		{
			get
			{
				return this.GetTable<ContractorsPhone>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Division> Divisions
		{
			get
			{
				return this.GetTable<Division>();
			}
		}
		
		public System.Data.Linq.Table<InsuranceBroker> InsuranceBrokers
		{
			get
			{
				return this.GetTable<InsuranceBroker>();
			}
		}
		
		public System.Data.Linq.Table<InsuranceCompany> InsuranceCompanies
		{
			get
			{
				return this.GetTable<InsuranceCompany>();
			}
		}
		
		public System.Data.Linq.Table<Licence> Licences
		{
			get
			{
				return this.GetTable<Licence>();
			}
		}
		
		public System.Data.Linq.Table<lookupPhoneType> lookupPhoneTypes
		{
			get
			{
				return this.GetTable<lookupPhoneType>();
			}
		}
		
		public System.Data.Linq.Table<lookupTag> lookupTags
		{
			get
			{
				return this.GetTable<lookupTag>();
			}
		}
		
		public System.Data.Linq.Table<Permit> Permits
		{
			get
			{
				return this.GetTable<Permit>();
			}
		}
		
		public System.Data.Linq.Table<PolicyLimit> PolicyLimits
		{
			get
			{
				return this.GetTable<PolicyLimit>();
			}
		}
		
		public System.Data.Linq.Table<Security> Securities
		{
			get
			{
				return this.GetTable<Security>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
		
		public System.Data.Linq.Table<TypeOfAgreement> TypeOfAgreements
		{
			get
			{
				return this.GetTable<TypeOfAgreement>();
			}
		}
		
		public System.Data.Linq.Table<TypeOfPermit> TypeOfPermits
		{
			get
			{
				return this.GetTable<TypeOfPermit>();
			}
		}
		
		public System.Data.Linq.Table<TypeOfPolicy> TypeOfPolicies
		{
			get
			{
				return this.GetTable<TypeOfPolicy>();
			}
		}
		
		public System.Data.Linq.Table<TypeOfWSIB> TypeOfWSIBs
		{
			get
			{
				return this.GetTable<TypeOfWSIB>();
			}
		}
		
		public System.Data.Linq.Table<Agreement> Agreements
		{
			get
			{
				return this.GetTable<Agreement>();
			}
		}
		
		public System.Data.Linq.Table<InsuranceBrokerEmail> InsuranceBrokerEmails
		{
			get
			{
				return this.GetTable<InsuranceBrokerEmail>();
			}
		}
		
		public System.Data.Linq.Table<InsurancePolicy> InsurancePolicies
		{
			get
			{
				return this.GetTable<InsurancePolicy>();
			}
		}
		
		public System.Data.Linq.Table<InsuranceNonOwnedAuto> InsuranceNonOwnedAutos
		{
			get
			{
				return this.GetTable<InsuranceNonOwnedAuto>();
			}
		}
		
		public System.Data.Linq.Table<Contractor> Contractors
		{
			get
			{
				return this.GetTable<Contractor>();
			}
		}
		
		public System.Data.Linq.Table<WSIB> WSIBs
		{
			get
			{
				return this.GetTable<WSIB>();
			}
		}
		
		public System.Data.Linq.Table<AvailableContractor> AvailableContractors
		{
			get
			{
				return this.GetTable<AvailableContractor>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AgreementsSigned")]
	public partial class AgreementsSigned : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Value;
		
		private bool _Active;
		
		private EntitySet<Agreement> _Agreements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public AgreementsSigned()
		{
			this._Agreements = new EntitySet<Agreement>(new Action<Agreement>(this.attach_Agreements), new Action<Agreement>(this.detach_Agreements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AgreementsSigned_Agreement", Storage="_Agreements", ThisKey="ID", OtherKey="AgreementSigned")]
		public EntitySet<Agreement> Agreements
		{
			get
			{
				return this._Agreements;
			}
			set
			{
				this._Agreements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Agreements(Agreement entity)
		{
			this.SendPropertyChanging();
			entity.AgreementsSigned = this;
		}
		
		private void detach_Agreements(Agreement entity)
		{
			this.SendPropertyChanging();
			entity.AgreementsSigned = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContractorsPhone")]
	public partial class ContractorsPhone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _cID;
		
		private System.Nullable<int> _PhoneType;
		
		private string _PhoneNumber;
		
		private EntityRef<lookupPhoneType> _lookupPhoneType;
		
		private EntityRef<Contractor> _Contractor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OncIDChanging(int value);
    partial void OncIDChanged();
    partial void OnPhoneTypeChanging(System.Nullable<int> value);
    partial void OnPhoneTypeChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    #endregion
		
		public ContractorsPhone()
		{
			this._lookupPhoneType = default(EntityRef<lookupPhoneType>);
			this._Contractor = default(EntityRef<Contractor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cID", DbType="Int NOT NULL")]
		public int cID
		{
			get
			{
				return this._cID;
			}
			set
			{
				if ((this._cID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncIDChanging(value);
					this.SendPropertyChanging();
					this._cID = value;
					this.SendPropertyChanged("cID");
					this.OncIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneType", DbType="Int")]
		public System.Nullable<int> PhoneType
		{
			get
			{
				return this._PhoneType;
			}
			set
			{
				if ((this._PhoneType != value))
				{
					if (this._lookupPhoneType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhoneTypeChanging(value);
					this.SendPropertyChanging();
					this._PhoneType = value;
					this.SendPropertyChanged("PhoneType");
					this.OnPhoneTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(15)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lookupPhoneType_ContractorsPhone", Storage="_lookupPhoneType", ThisKey="PhoneType", OtherKey="ID", IsForeignKey=true)]
		public lookupPhoneType lookupPhoneType
		{
			get
			{
				return this._lookupPhoneType.Entity;
			}
			set
			{
				lookupPhoneType previousValue = this._lookupPhoneType.Entity;
				if (((previousValue != value) 
							|| (this._lookupPhoneType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lookupPhoneType.Entity = null;
						previousValue.ContractorsPhones.Remove(this);
					}
					this._lookupPhoneType.Entity = value;
					if ((value != null))
					{
						value.ContractorsPhones.Add(this);
						this._PhoneType = value.ID;
					}
					else
					{
						this._PhoneType = default(Nullable<int>);
					}
					this.SendPropertyChanged("lookupPhoneType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_ContractorsPhone", Storage="_Contractor", ThisKey="cID", OtherKey="ID", IsForeignKey=true)]
		public Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				Contractor previousValue = this._Contractor.Entity;
				if (((previousValue != value) 
							|| (this._Contractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contractor.Entity = null;
						previousValue.ContractorsPhones.Remove(this);
					}
					this._Contractor.Entity = value;
					if ((value != null))
					{
						value.ContractorsPhones.Add(this);
						this._cID = value.ID;
					}
					else
					{
						this._cID = default(int);
					}
					this.SendPropertyChanged("Contractor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Departments")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Value;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<Division> _Divisions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Department()
		{
			this._Divisions = new EntitySet<Division>(new Action<Division>(this.attach_Divisions), new Action<Division>(this.detach_Divisions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Division", Storage="_Divisions", ThisKey="ID", OtherKey="Department")]
		public EntitySet<Division> Divisions
		{
			get
			{
				return this._Divisions;
			}
			set
			{
				this._Divisions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Divisions(Division entity)
		{
			this.SendPropertyChanging();
			entity.Department1 = this;
		}
		
		private void detach_Divisions(Division entity)
		{
			this.SendPropertyChanging();
			entity.Department1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Divisions")]
	public partial class Division : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _Department;
		
		private string _Division1;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<Licence> _Licences;
		
		private EntitySet<Agreement> _Agreements;
		
		private EntityRef<Department> _Department1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDepartmentChanging(System.Nullable<int> value);
    partial void OnDepartmentChanged();
    partial void OnDivision1Changing(string value);
    partial void OnDivision1Changed();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Division()
		{
			this._Licences = new EntitySet<Licence>(new Action<Licence>(this.attach_Licences), new Action<Licence>(this.detach_Licences));
			this._Agreements = new EntitySet<Agreement>(new Action<Agreement>(this.attach_Agreements), new Action<Agreement>(this.detach_Agreements));
			this._Department1 = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Department", DbType="Int")]
		public System.Nullable<int> Department
		{
			get
			{
				return this._Department;
			}
			set
			{
				if ((this._Department != value))
				{
					if (this._Department1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentChanging(value);
					this.SendPropertyChanging();
					this._Department = value;
					this.SendPropertyChanged("Department");
					this.OnDepartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Division", Storage="_Division1", DbType="NVarChar(50)")]
		public string Division1
		{
			get
			{
				return this._Division1;
			}
			set
			{
				if ((this._Division1 != value))
				{
					this.OnDivision1Changing(value);
					this.SendPropertyChanging();
					this._Division1 = value;
					this.SendPropertyChanged("Division1");
					this.OnDivision1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_Licence", Storage="_Licences", ThisKey="ID", OtherKey="Dept")]
		public EntitySet<Licence> Licences
		{
			get
			{
				return this._Licences;
			}
			set
			{
				this._Licences.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_Agreement", Storage="_Agreements", ThisKey="ID", OtherKey="CRCDept")]
		public EntitySet<Agreement> Agreements
		{
			get
			{
				return this._Agreements;
			}
			set
			{
				this._Agreements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Division", Storage="_Department1", ThisKey="Department", OtherKey="ID", IsForeignKey=true)]
		public Department Department1
		{
			get
			{
				return this._Department1.Entity;
			}
			set
			{
				Department previousValue = this._Department1.Entity;
				if (((previousValue != value) 
							|| (this._Department1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department1.Entity = null;
						previousValue.Divisions.Remove(this);
					}
					this._Department1.Entity = value;
					if ((value != null))
					{
						value.Divisions.Add(this);
						this._Department = value.ID;
					}
					else
					{
						this._Department = default(Nullable<int>);
					}
					this.SendPropertyChanged("Department1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Licences(Licence entity)
		{
			this.SendPropertyChanging();
			entity.Division = this;
		}
		
		private void detach_Licences(Licence entity)
		{
			this.SendPropertyChanging();
			entity.Division = null;
		}
		
		private void attach_Agreements(Agreement entity)
		{
			this.SendPropertyChanging();
			entity.Division = this;
		}
		
		private void detach_Agreements(Agreement entity)
		{
			this.SendPropertyChanging();
			entity.Division = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InsuranceBrokers")]
	public partial class InsuranceBroker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private bool _Active;
		
		private EntitySet<InsuranceBrokerEmail> _InsuranceBrokerEmails;
		
		private EntitySet<InsurancePolicy> _InsurancePolicies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public InsuranceBroker()
		{
			this._InsuranceBrokerEmails = new EntitySet<InsuranceBrokerEmail>(new Action<InsuranceBrokerEmail>(this.attach_InsuranceBrokerEmails), new Action<InsuranceBrokerEmail>(this.detach_InsuranceBrokerEmails));
			this._InsurancePolicies = new EntitySet<InsurancePolicy>(new Action<InsurancePolicy>(this.attach_InsurancePolicies), new Action<InsurancePolicy>(this.detach_InsurancePolicies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InsuranceBroker_InsuranceBrokerEmail", Storage="_InsuranceBrokerEmails", ThisKey="ID", OtherKey="bID")]
		public EntitySet<InsuranceBrokerEmail> InsuranceBrokerEmails
		{
			get
			{
				return this._InsuranceBrokerEmails;
			}
			set
			{
				this._InsuranceBrokerEmails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InsuranceBroker_InsurancePolicy", Storage="_InsurancePolicies", ThisKey="ID", OtherKey="BrokerID")]
		public EntitySet<InsurancePolicy> InsurancePolicies
		{
			get
			{
				return this._InsurancePolicies;
			}
			set
			{
				this._InsurancePolicies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InsuranceBrokerEmails(InsuranceBrokerEmail entity)
		{
			this.SendPropertyChanging();
			entity.InsuranceBroker = this;
		}
		
		private void detach_InsuranceBrokerEmails(InsuranceBrokerEmail entity)
		{
			this.SendPropertyChanging();
			entity.InsuranceBroker = null;
		}
		
		private void attach_InsurancePolicies(InsurancePolicy entity)
		{
			this.SendPropertyChanging();
			entity.InsuranceBroker = this;
		}
		
		private void detach_InsurancePolicies(InsurancePolicy entity)
		{
			this.SendPropertyChanging();
			entity.InsuranceBroker = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InsuranceCompanies")]
	public partial class InsuranceCompany : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Email;
		
		private bool _Active;
		
		private EntitySet<InsurancePolicy> _InsurancePolicies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public InsuranceCompany()
		{
			this._InsurancePolicies = new EntitySet<InsurancePolicy>(new Action<InsurancePolicy>(this.attach_InsurancePolicies), new Action<InsurancePolicy>(this.detach_InsurancePolicies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InsuranceCompany_InsurancePolicy", Storage="_InsurancePolicies", ThisKey="ID", OtherKey="insID")]
		public EntitySet<InsurancePolicy> InsurancePolicies
		{
			get
			{
				return this._InsurancePolicies;
			}
			set
			{
				this._InsurancePolicies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InsurancePolicies(InsurancePolicy entity)
		{
			this.SendPropertyChanging();
			entity.InsuranceCompany1 = this;
		}
		
		private void detach_InsurancePolicies(InsurancePolicy entity)
		{
			this.SendPropertyChanging();
			entity.InsuranceCompany1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Licences")]
	public partial class Licence : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _cID;
		
		private string _TypeOfLicence;
		
		private System.Nullable<bool> _CopyReceived;
		
		private string _LicFiledWith;
		
		private System.Nullable<int> _Dept;
		
		private EntityRef<Division> _Division;
		
		private EntityRef<Contractor> _Contractor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OncIDChanging(System.Nullable<int> value);
    partial void OncIDChanged();
    partial void OnTypeOfLicenceChanging(string value);
    partial void OnTypeOfLicenceChanged();
    partial void OnCopyReceivedChanging(System.Nullable<bool> value);
    partial void OnCopyReceivedChanged();
    partial void OnLicFiledWithChanging(string value);
    partial void OnLicFiledWithChanged();
    partial void OnDeptChanging(System.Nullable<int> value);
    partial void OnDeptChanged();
    #endregion
		
		public Licence()
		{
			this._Division = default(EntityRef<Division>);
			this._Contractor = default(EntityRef<Contractor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cID", DbType="Int")]
		public System.Nullable<int> cID
		{
			get
			{
				return this._cID;
			}
			set
			{
				if ((this._cID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncIDChanging(value);
					this.SendPropertyChanging();
					this._cID = value;
					this.SendPropertyChanged("cID");
					this.OncIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfLicence", DbType="NVarChar(100)")]
		public string TypeOfLicence
		{
			get
			{
				return this._TypeOfLicence;
			}
			set
			{
				if ((this._TypeOfLicence != value))
				{
					this.OnTypeOfLicenceChanging(value);
					this.SendPropertyChanging();
					this._TypeOfLicence = value;
					this.SendPropertyChanged("TypeOfLicence");
					this.OnTypeOfLicenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CopyReceived", DbType="Bit")]
		public System.Nullable<bool> CopyReceived
		{
			get
			{
				return this._CopyReceived;
			}
			set
			{
				if ((this._CopyReceived != value))
				{
					this.OnCopyReceivedChanging(value);
					this.SendPropertyChanging();
					this._CopyReceived = value;
					this.SendPropertyChanged("CopyReceived");
					this.OnCopyReceivedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicFiledWith", DbType="NVarChar(25)")]
		public string LicFiledWith
		{
			get
			{
				return this._LicFiledWith;
			}
			set
			{
				if ((this._LicFiledWith != value))
				{
					this.OnLicFiledWithChanging(value);
					this.SendPropertyChanging();
					this._LicFiledWith = value;
					this.SendPropertyChanged("LicFiledWith");
					this.OnLicFiledWithChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dept", DbType="Int")]
		public System.Nullable<int> Dept
		{
			get
			{
				return this._Dept;
			}
			set
			{
				if ((this._Dept != value))
				{
					if (this._Division.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeptChanging(value);
					this.SendPropertyChanging();
					this._Dept = value;
					this.SendPropertyChanged("Dept");
					this.OnDeptChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_Licence", Storage="_Division", ThisKey="Dept", OtherKey="ID", IsForeignKey=true)]
		public Division Division
		{
			get
			{
				return this._Division.Entity;
			}
			set
			{
				Division previousValue = this._Division.Entity;
				if (((previousValue != value) 
							|| (this._Division.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Division.Entity = null;
						previousValue.Licences.Remove(this);
					}
					this._Division.Entity = value;
					if ((value != null))
					{
						value.Licences.Add(this);
						this._Dept = value.ID;
					}
					else
					{
						this._Dept = default(Nullable<int>);
					}
					this.SendPropertyChanged("Division");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_Licence", Storage="_Contractor", ThisKey="cID", OtherKey="ID", IsForeignKey=true)]
		public Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				Contractor previousValue = this._Contractor.Entity;
				if (((previousValue != value) 
							|| (this._Contractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contractor.Entity = null;
						previousValue.Licences.Remove(this);
					}
					this._Contractor.Entity = value;
					if ((value != null))
					{
						value.Licences.Add(this);
						this._cID = value.ID;
					}
					else
					{
						this._cID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contractor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lookupPhoneTypes")]
	public partial class lookupPhoneType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Value;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<ContractorsPhone> _ContractorsPhones;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public lookupPhoneType()
		{
			this._ContractorsPhones = new EntitySet<ContractorsPhone>(new Action<ContractorsPhone>(this.attach_ContractorsPhones), new Action<ContractorsPhone>(this.detach_ContractorsPhones));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lookupPhoneType_ContractorsPhone", Storage="_ContractorsPhones", ThisKey="ID", OtherKey="PhoneType")]
		public EntitySet<ContractorsPhone> ContractorsPhones
		{
			get
			{
				return this._ContractorsPhones;
			}
			set
			{
				this._ContractorsPhones.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContractorsPhones(ContractorsPhone entity)
		{
			this.SendPropertyChanging();
			entity.lookupPhoneType = this;
		}
		
		private void detach_ContractorsPhones(ContractorsPhone entity)
		{
			this.SendPropertyChanging();
			entity.lookupPhoneType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lookupTags")]
	public partial class lookupTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Job;
		
		private bool _Active;
		
		private EntitySet<Tag> _Tags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnJobChanging(string value);
    partial void OnJobChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public lookupTag()
		{
			this._Tags = new EntitySet<Tag>(new Action<Tag>(this.attach_Tags), new Action<Tag>(this.detach_Tags));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Job", DbType="NVarChar(50)")]
		public string Job
		{
			get
			{
				return this._Job;
			}
			set
			{
				if ((this._Job != value))
				{
					this.OnJobChanging(value);
					this.SendPropertyChanging();
					this._Job = value;
					this.SendPropertyChanged("Job");
					this.OnJobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lookupTag_Tag", Storage="_Tags", ThisKey="ID", OtherKey="tID")]
		public EntitySet<Tag> Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				this._Tags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tags(Tag entity)
		{
			this.SendPropertyChanging();
			entity.lookupTag = this;
		}
		
		private void detach_Tags(Tag entity)
		{
			this.SendPropertyChanging();
			entity.lookupTag = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Permits")]
	public partial class Permit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _cID;
		
		private System.Nullable<int> _TypeOfPermit;
		
		private System.Nullable<bool> _CGLIns;
		
		private System.Nullable<bool> _AutoIns;
		
		private System.Nullable<int> _TypeOfSecurity;
		
		private System.Nullable<System.DateTime> _ExpDate;
		
		private EntityRef<TypeOfPermit> _TypeOfPermit1;
		
		private EntityRef<Contractor> _Contractor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OncIDChanging(System.Nullable<int> value);
    partial void OncIDChanged();
    partial void OnTypeOfPermitChanging(System.Nullable<int> value);
    partial void OnTypeOfPermitChanged();
    partial void OnCGLInsChanging(System.Nullable<bool> value);
    partial void OnCGLInsChanged();
    partial void OnAutoInsChanging(System.Nullable<bool> value);
    partial void OnAutoInsChanged();
    partial void OnTypeOfSecurityChanging(System.Nullable<int> value);
    partial void OnTypeOfSecurityChanged();
    partial void OnExpDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpDateChanged();
    #endregion
		
		public Permit()
		{
			this._TypeOfPermit1 = default(EntityRef<TypeOfPermit>);
			this._Contractor = default(EntityRef<Contractor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cID", DbType="Int")]
		public System.Nullable<int> cID
		{
			get
			{
				return this._cID;
			}
			set
			{
				if ((this._cID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncIDChanging(value);
					this.SendPropertyChanging();
					this._cID = value;
					this.SendPropertyChanged("cID");
					this.OncIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfPermit", DbType="Int")]
		public System.Nullable<int> TypeOfPermit
		{
			get
			{
				return this._TypeOfPermit;
			}
			set
			{
				if ((this._TypeOfPermit != value))
				{
					if (this._TypeOfPermit1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeOfPermitChanging(value);
					this.SendPropertyChanging();
					this._TypeOfPermit = value;
					this.SendPropertyChanged("TypeOfPermit");
					this.OnTypeOfPermitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CGLIns", DbType="Bit")]
		public System.Nullable<bool> CGLIns
		{
			get
			{
				return this._CGLIns;
			}
			set
			{
				if ((this._CGLIns != value))
				{
					this.OnCGLInsChanging(value);
					this.SendPropertyChanging();
					this._CGLIns = value;
					this.SendPropertyChanged("CGLIns");
					this.OnCGLInsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutoIns", DbType="Bit")]
		public System.Nullable<bool> AutoIns
		{
			get
			{
				return this._AutoIns;
			}
			set
			{
				if ((this._AutoIns != value))
				{
					this.OnAutoInsChanging(value);
					this.SendPropertyChanging();
					this._AutoIns = value;
					this.SendPropertyChanged("AutoIns");
					this.OnAutoInsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfSecurity", DbType="Int")]
		public System.Nullable<int> TypeOfSecurity
		{
			get
			{
				return this._TypeOfSecurity;
			}
			set
			{
				if ((this._TypeOfSecurity != value))
				{
					this.OnTypeOfSecurityChanging(value);
					this.SendPropertyChanging();
					this._TypeOfSecurity = value;
					this.SendPropertyChanged("TypeOfSecurity");
					this.OnTypeOfSecurityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpDate", DbType="Date")]
		public System.Nullable<System.DateTime> ExpDate
		{
			get
			{
				return this._ExpDate;
			}
			set
			{
				if ((this._ExpDate != value))
				{
					this.OnExpDateChanging(value);
					this.SendPropertyChanging();
					this._ExpDate = value;
					this.SendPropertyChanged("ExpDate");
					this.OnExpDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeOfPermit_Permit", Storage="_TypeOfPermit1", ThisKey="TypeOfPermit", OtherKey="ID", IsForeignKey=true)]
		public TypeOfPermit TypeOfPermit1
		{
			get
			{
				return this._TypeOfPermit1.Entity;
			}
			set
			{
				TypeOfPermit previousValue = this._TypeOfPermit1.Entity;
				if (((previousValue != value) 
							|| (this._TypeOfPermit1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeOfPermit1.Entity = null;
						previousValue.Permits.Remove(this);
					}
					this._TypeOfPermit1.Entity = value;
					if ((value != null))
					{
						value.Permits.Add(this);
						this._TypeOfPermit = value.ID;
					}
					else
					{
						this._TypeOfPermit = default(Nullable<int>);
					}
					this.SendPropertyChanged("TypeOfPermit1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_Permit", Storage="_Contractor", ThisKey="cID", OtherKey="ID", IsForeignKey=true)]
		public Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				Contractor previousValue = this._Contractor.Entity;
				if (((previousValue != value) 
							|| (this._Contractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contractor.Entity = null;
						previousValue.Permits.Remove(this);
					}
					this._Contractor.Entity = value;
					if ((value != null))
					{
						value.Permits.Add(this);
						this._cID = value.ID;
					}
					else
					{
						this._cID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contractor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PolicyLimits")]
	public partial class PolicyLimit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Value;
		
		private bool _Active;
		
		private EntitySet<InsurancePolicy> _InsurancePolicies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public PolicyLimit()
		{
			this._InsurancePolicies = new EntitySet<InsurancePolicy>(new Action<InsurancePolicy>(this.attach_InsurancePolicies), new Action<InsurancePolicy>(this.detach_InsurancePolicies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PolicyLimit_InsurancePolicy", Storage="_InsurancePolicies", ThisKey="ID", OtherKey="PolicyLimit")]
		public EntitySet<InsurancePolicy> InsurancePolicies
		{
			get
			{
				return this._InsurancePolicies;
			}
			set
			{
				this._InsurancePolicies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InsurancePolicies(InsurancePolicy entity)
		{
			this.SendPropertyChanging();
			entity.PolicyLimit1 = this;
		}
		
		private void detach_InsurancePolicies(InsurancePolicy entity)
		{
			this.SendPropertyChanging();
			entity.PolicyLimit1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Securities")]
	public partial class Security : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Value;
		
		private bool _Active;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Security()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tags")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _cID;
		
		private System.Nullable<int> _tID;
		
		private EntityRef<lookupTag> _lookupTag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OncIDChanging(System.Nullable<int> value);
    partial void OncIDChanged();
    partial void OntIDChanging(System.Nullable<int> value);
    partial void OntIDChanged();
    #endregion
		
		public Tag()
		{
			this._lookupTag = default(EntityRef<lookupTag>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cID", DbType="Int")]
		public System.Nullable<int> cID
		{
			get
			{
				return this._cID;
			}
			set
			{
				if ((this._cID != value))
				{
					this.OncIDChanging(value);
					this.SendPropertyChanging();
					this._cID = value;
					this.SendPropertyChanged("cID");
					this.OncIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tID", DbType="Int")]
		public System.Nullable<int> tID
		{
			get
			{
				return this._tID;
			}
			set
			{
				if ((this._tID != value))
				{
					if (this._lookupTag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntIDChanging(value);
					this.SendPropertyChanging();
					this._tID = value;
					this.SendPropertyChanged("tID");
					this.OntIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="lookupTag_Tag", Storage="_lookupTag", ThisKey="tID", OtherKey="ID", IsForeignKey=true)]
		public lookupTag lookupTag
		{
			get
			{
				return this._lookupTag.Entity;
			}
			set
			{
				lookupTag previousValue = this._lookupTag.Entity;
				if (((previousValue != value) 
							|| (this._lookupTag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._lookupTag.Entity = null;
						previousValue.Tags.Remove(this);
					}
					this._lookupTag.Entity = value;
					if ((value != null))
					{
						value.Tags.Add(this);
						this._tID = value.ID;
					}
					else
					{
						this._tID = default(Nullable<int>);
					}
					this.SendPropertyChanged("lookupTag");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypeOfAgreements")]
	public partial class TypeOfAgreement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Value;
		
		private bool _Active;
		
		private EntitySet<Agreement> _Agreements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public TypeOfAgreement()
		{
			this._Agreements = new EntitySet<Agreement>(new Action<Agreement>(this.attach_Agreements), new Action<Agreement>(this.detach_Agreements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeOfAgreement_Agreement", Storage="_Agreements", ThisKey="ID", OtherKey="TypeOfAgreement")]
		public EntitySet<Agreement> Agreements
		{
			get
			{
				return this._Agreements;
			}
			set
			{
				this._Agreements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Agreements(Agreement entity)
		{
			this.SendPropertyChanging();
			entity.TypeOfAgreement1 = this;
		}
		
		private void detach_Agreements(Agreement entity)
		{
			this.SendPropertyChanging();
			entity.TypeOfAgreement1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypeOfPermits")]
	public partial class TypeOfPermit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Type;
		
		private bool _Active;
		
		private EntitySet<Permit> _Permits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public TypeOfPermit()
		{
			this._Permits = new EntitySet<Permit>(new Action<Permit>(this.attach_Permits), new Action<Permit>(this.detach_Permits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeOfPermit_Permit", Storage="_Permits", ThisKey="ID", OtherKey="TypeOfPermit")]
		public EntitySet<Permit> Permits
		{
			get
			{
				return this._Permits;
			}
			set
			{
				this._Permits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Permits(Permit entity)
		{
			this.SendPropertyChanging();
			entity.TypeOfPermit1 = this;
		}
		
		private void detach_Permits(Permit entity)
		{
			this.SendPropertyChanging();
			entity.TypeOfPermit1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypeOfPolicies")]
	public partial class TypeOfPolicy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Type;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<InsurancePolicy> _InsurancePolicies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public TypeOfPolicy()
		{
			this._InsurancePolicies = new EntitySet<InsurancePolicy>(new Action<InsurancePolicy>(this.attach_InsurancePolicies), new Action<InsurancePolicy>(this.detach_InsurancePolicies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(25)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeOfPolicy_InsurancePolicy", Storage="_InsurancePolicies", ThisKey="ID", OtherKey="TypeOfPolicy")]
		public EntitySet<InsurancePolicy> InsurancePolicies
		{
			get
			{
				return this._InsurancePolicies;
			}
			set
			{
				this._InsurancePolicies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InsurancePolicies(InsurancePolicy entity)
		{
			this.SendPropertyChanging();
			entity.TypeOfPolicy1 = this;
		}
		
		private void detach_InsurancePolicies(InsurancePolicy entity)
		{
			this.SendPropertyChanging();
			entity.TypeOfPolicy1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypeOfWSIBs")]
	public partial class TypeOfWSIB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Value;
		
		private bool _Active;
		
		private EntitySet<WSIB> _WSIBs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public TypeOfWSIB()
		{
			this._WSIBs = new EntitySet<WSIB>(new Action<WSIB>(this.attach_WSIBs), new Action<WSIB>(this.detach_WSIBs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeOfWSIB_WSIB", Storage="_WSIBs", ThisKey="ID", OtherKey="WSIBCoverage")]
		public EntitySet<WSIB> WSIBs
		{
			get
			{
				return this._WSIBs;
			}
			set
			{
				this._WSIBs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WSIBs(WSIB entity)
		{
			this.SendPropertyChanging();
			entity.TypeOfWSIB = this;
		}
		
		private void detach_WSIBs(WSIB entity)
		{
			this.SendPropertyChanging();
			entity.TypeOfWSIB = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Agreements")]
	public partial class Agreement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _cID;
		
		private System.Nullable<int> _TypeOfAgreement;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _TermEffectiveDate;
		
		private System.Nullable<System.DateTime> _TermExpiryDate;
		
		private System.Nullable<System.DateTime> _ExtensionExpiryDate;
		
		private string _AmountBeforeTax;
		
		private System.Nullable<int> _AgreementSigned;
		
		private string _PONumber;
		
		private System.Nullable<int> _DivisionIssued;
		
		private string _SecuritiesRequired;
		
		private System.Nullable<bool> _BidDepositRecd;
		
		private string _BidDepositAmt;
		
		private System.Nullable<bool> _PerfBondReceived;
		
		private string _PerfBondAmt;
		
		private System.Nullable<bool> _LabourBondRecd;
		
		private string _LabourBondAmt;
		
		private System.Nullable<bool> _TestingReqd;
		
		private System.Nullable<bool> _TestingRecd;
		
		private System.Nullable<bool> _MOLReqd;
		
		private System.Nullable<bool> _MOLRecd;
		
		private System.Nullable<bool> _MTOCertRecd;
		
		private System.Nullable<System.DateTime> _TrucksCal;
		
		private System.Nullable<bool> _Form1000Req;
		
		private System.Nullable<bool> _Form1000Recd;
		
		private string _OtherReq;
		
		private System.Nullable<bool> _TenPerHoldback;
		
		private string _CRCFiledWith;
		
		private System.Nullable<int> _CRCDept;
		
		private EntityRef<AgreementsSigned> _AgreementsSigned;
		
		private EntityRef<Division> _Division;
		
		private EntityRef<TypeOfAgreement> _TypeOfAgreement1;
		
		private EntityRef<Contractor> _Contractor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OncIDChanging(int value);
    partial void OncIDChanged();
    partial void OnTypeOfAgreementChanging(System.Nullable<int> value);
    partial void OnTypeOfAgreementChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTermEffectiveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTermEffectiveDateChanged();
    partial void OnTermExpiryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTermExpiryDateChanged();
    partial void OnExtensionExpiryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExtensionExpiryDateChanged();
    partial void OnAmountBeforeTaxChanging(string value);
    partial void OnAmountBeforeTaxChanged();
    partial void OnAgreementSignedChanging(System.Nullable<int> value);
    partial void OnAgreementSignedChanged();
    partial void OnPONumberChanging(string value);
    partial void OnPONumberChanged();
    partial void OnDivisionIssuedChanging(System.Nullable<int> value);
    partial void OnDivisionIssuedChanged();
    partial void OnSecuritiesRequiredChanging(string value);
    partial void OnSecuritiesRequiredChanged();
    partial void OnBidDepositRecdChanging(System.Nullable<bool> value);
    partial void OnBidDepositRecdChanged();
    partial void OnBidDepositAmtChanging(string value);
    partial void OnBidDepositAmtChanged();
    partial void OnPerfBondReceivedChanging(System.Nullable<bool> value);
    partial void OnPerfBondReceivedChanged();
    partial void OnPerfBondAmtChanging(string value);
    partial void OnPerfBondAmtChanged();
    partial void OnLabourBondRecdChanging(System.Nullable<bool> value);
    partial void OnLabourBondRecdChanged();
    partial void OnLabourBondAmtChanging(string value);
    partial void OnLabourBondAmtChanged();
    partial void OnTestingReqdChanging(System.Nullable<bool> value);
    partial void OnTestingReqdChanged();
    partial void OnTestingRecdChanging(System.Nullable<bool> value);
    partial void OnTestingRecdChanged();
    partial void OnMOLReqdChanging(System.Nullable<bool> value);
    partial void OnMOLReqdChanged();
    partial void OnMOLRecdChanging(System.Nullable<bool> value);
    partial void OnMOLRecdChanged();
    partial void OnMTOCertRecdChanging(System.Nullable<bool> value);
    partial void OnMTOCertRecdChanged();
    partial void OnTrucksCalChanging(System.Nullable<System.DateTime> value);
    partial void OnTrucksCalChanged();
    partial void OnForm1000ReqChanging(System.Nullable<bool> value);
    partial void OnForm1000ReqChanged();
    partial void OnForm1000RecdChanging(System.Nullable<bool> value);
    partial void OnForm1000RecdChanged();
    partial void OnOtherReqChanging(string value);
    partial void OnOtherReqChanged();
    partial void OnTenPerHoldbackChanging(System.Nullable<bool> value);
    partial void OnTenPerHoldbackChanged();
    partial void OnCRCFiledWithChanging(string value);
    partial void OnCRCFiledWithChanged();
    partial void OnCRCDeptChanging(System.Nullable<int> value);
    partial void OnCRCDeptChanged();
    #endregion
		
		public Agreement()
		{
			this._AgreementsSigned = default(EntityRef<AgreementsSigned>);
			this._Division = default(EntityRef<Division>);
			this._TypeOfAgreement1 = default(EntityRef<TypeOfAgreement>);
			this._Contractor = default(EntityRef<Contractor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cID", DbType="Int NOT NULL")]
		public int cID
		{
			get
			{
				return this._cID;
			}
			set
			{
				if ((this._cID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncIDChanging(value);
					this.SendPropertyChanging();
					this._cID = value;
					this.SendPropertyChanged("cID");
					this.OncIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfAgreement", DbType="Int")]
		public System.Nullable<int> TypeOfAgreement
		{
			get
			{
				return this._TypeOfAgreement;
			}
			set
			{
				if ((this._TypeOfAgreement != value))
				{
					if (this._TypeOfAgreement1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeOfAgreementChanging(value);
					this.SendPropertyChanging();
					this._TypeOfAgreement = value;
					this.SendPropertyChanged("TypeOfAgreement");
					this.OnTypeOfAgreementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermEffectiveDate", DbType="Date")]
		public System.Nullable<System.DateTime> TermEffectiveDate
		{
			get
			{
				return this._TermEffectiveDate;
			}
			set
			{
				if ((this._TermEffectiveDate != value))
				{
					this.OnTermEffectiveDateChanging(value);
					this.SendPropertyChanging();
					this._TermEffectiveDate = value;
					this.SendPropertyChanged("TermEffectiveDate");
					this.OnTermEffectiveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermExpiryDate", DbType="Date")]
		public System.Nullable<System.DateTime> TermExpiryDate
		{
			get
			{
				return this._TermExpiryDate;
			}
			set
			{
				if ((this._TermExpiryDate != value))
				{
					this.OnTermExpiryDateChanging(value);
					this.SendPropertyChanging();
					this._TermExpiryDate = value;
					this.SendPropertyChanged("TermExpiryDate");
					this.OnTermExpiryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtensionExpiryDate", DbType="Date")]
		public System.Nullable<System.DateTime> ExtensionExpiryDate
		{
			get
			{
				return this._ExtensionExpiryDate;
			}
			set
			{
				if ((this._ExtensionExpiryDate != value))
				{
					this.OnExtensionExpiryDateChanging(value);
					this.SendPropertyChanging();
					this._ExtensionExpiryDate = value;
					this.SendPropertyChanged("ExtensionExpiryDate");
					this.OnExtensionExpiryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountBeforeTax", DbType="NVarChar(10)")]
		public string AmountBeforeTax
		{
			get
			{
				return this._AmountBeforeTax;
			}
			set
			{
				if ((this._AmountBeforeTax != value))
				{
					this.OnAmountBeforeTaxChanging(value);
					this.SendPropertyChanging();
					this._AmountBeforeTax = value;
					this.SendPropertyChanged("AmountBeforeTax");
					this.OnAmountBeforeTaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgreementSigned", DbType="Int")]
		public System.Nullable<int> AgreementSigned
		{
			get
			{
				return this._AgreementSigned;
			}
			set
			{
				if ((this._AgreementSigned != value))
				{
					if (this._AgreementsSigned.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAgreementSignedChanging(value);
					this.SendPropertyChanging();
					this._AgreementSigned = value;
					this.SendPropertyChanged("AgreementSigned");
					this.OnAgreementSignedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PONumber", DbType="NVarChar(10)")]
		public string PONumber
		{
			get
			{
				return this._PONumber;
			}
			set
			{
				if ((this._PONumber != value))
				{
					this.OnPONumberChanging(value);
					this.SendPropertyChanging();
					this._PONumber = value;
					this.SendPropertyChanged("PONumber");
					this.OnPONumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivisionIssued", DbType="Int")]
		public System.Nullable<int> DivisionIssued
		{
			get
			{
				return this._DivisionIssued;
			}
			set
			{
				if ((this._DivisionIssued != value))
				{
					this.OnDivisionIssuedChanging(value);
					this.SendPropertyChanging();
					this._DivisionIssued = value;
					this.SendPropertyChanged("DivisionIssued");
					this.OnDivisionIssuedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecuritiesRequired", DbType="NVarChar(10)")]
		public string SecuritiesRequired
		{
			get
			{
				return this._SecuritiesRequired;
			}
			set
			{
				if ((this._SecuritiesRequired != value))
				{
					this.OnSecuritiesRequiredChanging(value);
					this.SendPropertyChanging();
					this._SecuritiesRequired = value;
					this.SendPropertyChanged("SecuritiesRequired");
					this.OnSecuritiesRequiredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BidDepositRecd", DbType="Bit")]
		public System.Nullable<bool> BidDepositRecd
		{
			get
			{
				return this._BidDepositRecd;
			}
			set
			{
				if ((this._BidDepositRecd != value))
				{
					this.OnBidDepositRecdChanging(value);
					this.SendPropertyChanging();
					this._BidDepositRecd = value;
					this.SendPropertyChanged("BidDepositRecd");
					this.OnBidDepositRecdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BidDepositAmt", DbType="NVarChar(10)")]
		public string BidDepositAmt
		{
			get
			{
				return this._BidDepositAmt;
			}
			set
			{
				if ((this._BidDepositAmt != value))
				{
					this.OnBidDepositAmtChanging(value);
					this.SendPropertyChanging();
					this._BidDepositAmt = value;
					this.SendPropertyChanged("BidDepositAmt");
					this.OnBidDepositAmtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PerfBondReceived", DbType="Bit")]
		public System.Nullable<bool> PerfBondReceived
		{
			get
			{
				return this._PerfBondReceived;
			}
			set
			{
				if ((this._PerfBondReceived != value))
				{
					this.OnPerfBondReceivedChanging(value);
					this.SendPropertyChanging();
					this._PerfBondReceived = value;
					this.SendPropertyChanged("PerfBondReceived");
					this.OnPerfBondReceivedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PerfBondAmt", DbType="NVarChar(10)")]
		public string PerfBondAmt
		{
			get
			{
				return this._PerfBondAmt;
			}
			set
			{
				if ((this._PerfBondAmt != value))
				{
					this.OnPerfBondAmtChanging(value);
					this.SendPropertyChanging();
					this._PerfBondAmt = value;
					this.SendPropertyChanged("PerfBondAmt");
					this.OnPerfBondAmtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabourBondRecd", DbType="Bit")]
		public System.Nullable<bool> LabourBondRecd
		{
			get
			{
				return this._LabourBondRecd;
			}
			set
			{
				if ((this._LabourBondRecd != value))
				{
					this.OnLabourBondRecdChanging(value);
					this.SendPropertyChanging();
					this._LabourBondRecd = value;
					this.SendPropertyChanged("LabourBondRecd");
					this.OnLabourBondRecdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabourBondAmt", DbType="NVarChar(10)")]
		public string LabourBondAmt
		{
			get
			{
				return this._LabourBondAmt;
			}
			set
			{
				if ((this._LabourBondAmt != value))
				{
					this.OnLabourBondAmtChanging(value);
					this.SendPropertyChanging();
					this._LabourBondAmt = value;
					this.SendPropertyChanged("LabourBondAmt");
					this.OnLabourBondAmtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestingReqd", DbType="Bit")]
		public System.Nullable<bool> TestingReqd
		{
			get
			{
				return this._TestingReqd;
			}
			set
			{
				if ((this._TestingReqd != value))
				{
					this.OnTestingReqdChanging(value);
					this.SendPropertyChanging();
					this._TestingReqd = value;
					this.SendPropertyChanged("TestingReqd");
					this.OnTestingReqdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestingRecd", DbType="Bit")]
		public System.Nullable<bool> TestingRecd
		{
			get
			{
				return this._TestingRecd;
			}
			set
			{
				if ((this._TestingRecd != value))
				{
					this.OnTestingRecdChanging(value);
					this.SendPropertyChanging();
					this._TestingRecd = value;
					this.SendPropertyChanged("TestingRecd");
					this.OnTestingRecdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MOLReqd", DbType="Bit")]
		public System.Nullable<bool> MOLReqd
		{
			get
			{
				return this._MOLReqd;
			}
			set
			{
				if ((this._MOLReqd != value))
				{
					this.OnMOLReqdChanging(value);
					this.SendPropertyChanging();
					this._MOLReqd = value;
					this.SendPropertyChanged("MOLReqd");
					this.OnMOLReqdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MOLRecd", DbType="Bit")]
		public System.Nullable<bool> MOLRecd
		{
			get
			{
				return this._MOLRecd;
			}
			set
			{
				if ((this._MOLRecd != value))
				{
					this.OnMOLRecdChanging(value);
					this.SendPropertyChanging();
					this._MOLRecd = value;
					this.SendPropertyChanged("MOLRecd");
					this.OnMOLRecdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MTOCertRecd", DbType="Bit")]
		public System.Nullable<bool> MTOCertRecd
		{
			get
			{
				return this._MTOCertRecd;
			}
			set
			{
				if ((this._MTOCertRecd != value))
				{
					this.OnMTOCertRecdChanging(value);
					this.SendPropertyChanging();
					this._MTOCertRecd = value;
					this.SendPropertyChanged("MTOCertRecd");
					this.OnMTOCertRecdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrucksCal", DbType="Date")]
		public System.Nullable<System.DateTime> TrucksCal
		{
			get
			{
				return this._TrucksCal;
			}
			set
			{
				if ((this._TrucksCal != value))
				{
					this.OnTrucksCalChanging(value);
					this.SendPropertyChanging();
					this._TrucksCal = value;
					this.SendPropertyChanged("TrucksCal");
					this.OnTrucksCalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Form1000Req", DbType="Bit")]
		public System.Nullable<bool> Form1000Req
		{
			get
			{
				return this._Form1000Req;
			}
			set
			{
				if ((this._Form1000Req != value))
				{
					this.OnForm1000ReqChanging(value);
					this.SendPropertyChanging();
					this._Form1000Req = value;
					this.SendPropertyChanged("Form1000Req");
					this.OnForm1000ReqChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Form1000Recd", DbType="Bit")]
		public System.Nullable<bool> Form1000Recd
		{
			get
			{
				return this._Form1000Recd;
			}
			set
			{
				if ((this._Form1000Recd != value))
				{
					this.OnForm1000RecdChanging(value);
					this.SendPropertyChanging();
					this._Form1000Recd = value;
					this.SendPropertyChanged("Form1000Recd");
					this.OnForm1000RecdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherReq", DbType="NVarChar(255)")]
		public string OtherReq
		{
			get
			{
				return this._OtherReq;
			}
			set
			{
				if ((this._OtherReq != value))
				{
					this.OnOtherReqChanging(value);
					this.SendPropertyChanging();
					this._OtherReq = value;
					this.SendPropertyChanged("OtherReq");
					this.OnOtherReqChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenPerHoldback", DbType="Bit")]
		public System.Nullable<bool> TenPerHoldback
		{
			get
			{
				return this._TenPerHoldback;
			}
			set
			{
				if ((this._TenPerHoldback != value))
				{
					this.OnTenPerHoldbackChanging(value);
					this.SendPropertyChanging();
					this._TenPerHoldback = value;
					this.SendPropertyChanged("TenPerHoldback");
					this.OnTenPerHoldbackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CRCFiledWith", DbType="NVarChar(50)")]
		public string CRCFiledWith
		{
			get
			{
				return this._CRCFiledWith;
			}
			set
			{
				if ((this._CRCFiledWith != value))
				{
					this.OnCRCFiledWithChanging(value);
					this.SendPropertyChanging();
					this._CRCFiledWith = value;
					this.SendPropertyChanged("CRCFiledWith");
					this.OnCRCFiledWithChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CRCDept", DbType="Int")]
		public System.Nullable<int> CRCDept
		{
			get
			{
				return this._CRCDept;
			}
			set
			{
				if ((this._CRCDept != value))
				{
					if (this._Division.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCRCDeptChanging(value);
					this.SendPropertyChanging();
					this._CRCDept = value;
					this.SendPropertyChanged("CRCDept");
					this.OnCRCDeptChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AgreementsSigned_Agreement", Storage="_AgreementsSigned", ThisKey="AgreementSigned", OtherKey="ID", IsForeignKey=true)]
		public AgreementsSigned AgreementsSigned
		{
			get
			{
				return this._AgreementsSigned.Entity;
			}
			set
			{
				AgreementsSigned previousValue = this._AgreementsSigned.Entity;
				if (((previousValue != value) 
							|| (this._AgreementsSigned.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AgreementsSigned.Entity = null;
						previousValue.Agreements.Remove(this);
					}
					this._AgreementsSigned.Entity = value;
					if ((value != null))
					{
						value.Agreements.Add(this);
						this._AgreementSigned = value.ID;
					}
					else
					{
						this._AgreementSigned = default(Nullable<int>);
					}
					this.SendPropertyChanged("AgreementsSigned");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_Agreement", Storage="_Division", ThisKey="CRCDept", OtherKey="ID", IsForeignKey=true)]
		public Division Division
		{
			get
			{
				return this._Division.Entity;
			}
			set
			{
				Division previousValue = this._Division.Entity;
				if (((previousValue != value) 
							|| (this._Division.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Division.Entity = null;
						previousValue.Agreements.Remove(this);
					}
					this._Division.Entity = value;
					if ((value != null))
					{
						value.Agreements.Add(this);
						this._CRCDept = value.ID;
					}
					else
					{
						this._CRCDept = default(Nullable<int>);
					}
					this.SendPropertyChanged("Division");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeOfAgreement_Agreement", Storage="_TypeOfAgreement1", ThisKey="TypeOfAgreement", OtherKey="ID", IsForeignKey=true)]
		public TypeOfAgreement TypeOfAgreement1
		{
			get
			{
				return this._TypeOfAgreement1.Entity;
			}
			set
			{
				TypeOfAgreement previousValue = this._TypeOfAgreement1.Entity;
				if (((previousValue != value) 
							|| (this._TypeOfAgreement1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeOfAgreement1.Entity = null;
						previousValue.Agreements.Remove(this);
					}
					this._TypeOfAgreement1.Entity = value;
					if ((value != null))
					{
						value.Agreements.Add(this);
						this._TypeOfAgreement = value.ID;
					}
					else
					{
						this._TypeOfAgreement = default(Nullable<int>);
					}
					this.SendPropertyChanged("TypeOfAgreement1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_Agreement", Storage="_Contractor", ThisKey="cID", OtherKey="ID", IsForeignKey=true)]
		public Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				Contractor previousValue = this._Contractor.Entity;
				if (((previousValue != value) 
							|| (this._Contractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contractor.Entity = null;
						previousValue.Agreements.Remove(this);
					}
					this._Contractor.Entity = value;
					if ((value != null))
					{
						value.Agreements.Add(this);
						this._cID = value.ID;
					}
					else
					{
						this._cID = default(int);
					}
					this.SendPropertyChanged("Contractor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InsuranceBrokerEmails")]
	public partial class InsuranceBrokerEmail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _bID;
		
		private string _Email;
		
		private bool _Active;
		
		private EntitySet<InsurancePolicy> _InsurancePolicies;
		
		private EntityRef<InsuranceBroker> _InsuranceBroker;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnbIDChanging(int value);
    partial void OnbIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public InsuranceBrokerEmail()
		{
			this._InsurancePolicies = new EntitySet<InsurancePolicy>(new Action<InsurancePolicy>(this.attach_InsurancePolicies), new Action<InsurancePolicy>(this.detach_InsurancePolicies));
			this._InsuranceBroker = default(EntityRef<InsuranceBroker>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bID", DbType="Int NOT NULL")]
		public int bID
		{
			get
			{
				return this._bID;
			}
			set
			{
				if ((this._bID != value))
				{
					if (this._InsuranceBroker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnbIDChanging(value);
					this.SendPropertyChanging();
					this._bID = value;
					this.SendPropertyChanged("bID");
					this.OnbIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InsuranceBrokerEmail_InsurancePolicy", Storage="_InsurancePolicies", ThisKey="ID", OtherKey="BrokerEmailID")]
		public EntitySet<InsurancePolicy> InsurancePolicies
		{
			get
			{
				return this._InsurancePolicies;
			}
			set
			{
				this._InsurancePolicies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InsuranceBroker_InsuranceBrokerEmail", Storage="_InsuranceBroker", ThisKey="bID", OtherKey="ID", IsForeignKey=true)]
		public InsuranceBroker InsuranceBroker
		{
			get
			{
				return this._InsuranceBroker.Entity;
			}
			set
			{
				InsuranceBroker previousValue = this._InsuranceBroker.Entity;
				if (((previousValue != value) 
							|| (this._InsuranceBroker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InsuranceBroker.Entity = null;
						previousValue.InsuranceBrokerEmails.Remove(this);
					}
					this._InsuranceBroker.Entity = value;
					if ((value != null))
					{
						value.InsuranceBrokerEmails.Add(this);
						this._bID = value.ID;
					}
					else
					{
						this._bID = default(int);
					}
					this.SendPropertyChanged("InsuranceBroker");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InsurancePolicies(InsurancePolicy entity)
		{
			this.SendPropertyChanging();
			entity.InsuranceBrokerEmail = this;
		}
		
		private void detach_InsurancePolicies(InsurancePolicy entity)
		{
			this.SendPropertyChanging();
			entity.InsuranceBrokerEmail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Insurance")]
	public partial class InsurancePolicy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _cID;
		
		private string _CertReqFor;
		
		private System.Nullable<int> _TypeOfPolicy;
		
		private System.Nullable<bool> _ExemptFromAuto;
		
		private System.Nullable<bool> _PerOccurance;
		
		private System.Nullable<bool> _ProductsCompletedOps;
		
		private System.Nullable<int> _NonOwnedAuto;
		
		private System.Nullable<bool> _CrossLiability;
		
		private System.Nullable<bool> _NCasAddIns;
		
		private string _PolicyNumber;
		
		private System.Nullable<int> _PolicyLimit;
		
		private string _PolicyLimitOther;
		
		private System.Nullable<System.DateTime> _ExpiryDate;
		
		private string _InsuranceCompany;
		
		private System.Nullable<int> _insID;
		
		private string _Address;
		
		private string _InsEmail;
		
		private string _BrokerName;
		
		private System.Nullable<int> _BrokerID;
		
		private System.Nullable<int> _BrokerEmailID;
		
		private string _BrokerAddress;
		
		private string _BrokerEmail;
		
		private System.Nullable<bool> _CertSigned;
		
		private System.Nullable<bool> _TenantsLegalLiability;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<InsuranceBroker> _InsuranceBroker;
		
		private EntityRef<InsuranceBrokerEmail> _InsuranceBrokerEmail;
		
		private EntityRef<InsuranceCompany> _InsuranceCompany1;
		
		private EntityRef<PolicyLimit> _PolicyLimit1;
		
		private EntityRef<TypeOfPolicy> _TypeOfPolicy1;
		
		private EntityRef<InsuranceNonOwnedAuto> _InsuranceNonOwnedAuto;
		
		private EntityRef<Contractor> _Contractor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OncIDChanging(int value);
    partial void OncIDChanged();
    partial void OnCertReqForChanging(string value);
    partial void OnCertReqForChanged();
    partial void OnTypeOfPolicyChanging(System.Nullable<int> value);
    partial void OnTypeOfPolicyChanged();
    partial void OnExemptFromAutoChanging(System.Nullable<bool> value);
    partial void OnExemptFromAutoChanged();
    partial void OnPerOccuranceChanging(System.Nullable<bool> value);
    partial void OnPerOccuranceChanged();
    partial void OnProductsCompletedOpsChanging(System.Nullable<bool> value);
    partial void OnProductsCompletedOpsChanged();
    partial void OnNonOwnedAutoChanging(System.Nullable<int> value);
    partial void OnNonOwnedAutoChanged();
    partial void OnCrossLiabilityChanging(System.Nullable<bool> value);
    partial void OnCrossLiabilityChanged();
    partial void OnNCasAddInsChanging(System.Nullable<bool> value);
    partial void OnNCasAddInsChanged();
    partial void OnPolicyNumberChanging(string value);
    partial void OnPolicyNumberChanged();
    partial void OnPolicyLimitChanging(System.Nullable<int> value);
    partial void OnPolicyLimitChanged();
    partial void OnPolicyLimitOtherChanging(string value);
    partial void OnPolicyLimitOtherChanged();
    partial void OnExpiryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpiryDateChanged();
    partial void OnInsuranceCompanyChanging(string value);
    partial void OnInsuranceCompanyChanged();
    partial void OninsIDChanging(System.Nullable<int> value);
    partial void OninsIDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnInsEmailChanging(string value);
    partial void OnInsEmailChanged();
    partial void OnBrokerNameChanging(string value);
    partial void OnBrokerNameChanged();
    partial void OnBrokerIDChanging(System.Nullable<int> value);
    partial void OnBrokerIDChanged();
    partial void OnBrokerEmailIDChanging(System.Nullable<int> value);
    partial void OnBrokerEmailIDChanged();
    partial void OnBrokerAddressChanging(string value);
    partial void OnBrokerAddressChanged();
    partial void OnBrokerEmailChanging(string value);
    partial void OnBrokerEmailChanged();
    partial void OnCertSignedChanging(System.Nullable<bool> value);
    partial void OnCertSignedChanged();
    partial void OnTenantsLegalLiabilityChanging(System.Nullable<bool> value);
    partial void OnTenantsLegalLiabilityChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public InsurancePolicy()
		{
			this._InsuranceBroker = default(EntityRef<InsuranceBroker>);
			this._InsuranceBrokerEmail = default(EntityRef<InsuranceBrokerEmail>);
			this._InsuranceCompany1 = default(EntityRef<InsuranceCompany>);
			this._PolicyLimit1 = default(EntityRef<PolicyLimit>);
			this._TypeOfPolicy1 = default(EntityRef<TypeOfPolicy>);
			this._InsuranceNonOwnedAuto = default(EntityRef<InsuranceNonOwnedAuto>);
			this._Contractor = default(EntityRef<Contractor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cID", DbType="Int NOT NULL")]
		public int cID
		{
			get
			{
				return this._cID;
			}
			set
			{
				if ((this._cID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncIDChanging(value);
					this.SendPropertyChanging();
					this._cID = value;
					this.SendPropertyChanged("cID");
					this.OncIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CertReqFor", DbType="NVarChar(255)")]
		public string CertReqFor
		{
			get
			{
				return this._CertReqFor;
			}
			set
			{
				if ((this._CertReqFor != value))
				{
					this.OnCertReqForChanging(value);
					this.SendPropertyChanging();
					this._CertReqFor = value;
					this.SendPropertyChanged("CertReqFor");
					this.OnCertReqForChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfPolicy", DbType="Int")]
		public System.Nullable<int> TypeOfPolicy
		{
			get
			{
				return this._TypeOfPolicy;
			}
			set
			{
				if ((this._TypeOfPolicy != value))
				{
					if (this._TypeOfPolicy1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeOfPolicyChanging(value);
					this.SendPropertyChanging();
					this._TypeOfPolicy = value;
					this.SendPropertyChanged("TypeOfPolicy");
					this.OnTypeOfPolicyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExemptFromAuto", DbType="Bit")]
		public System.Nullable<bool> ExemptFromAuto
		{
			get
			{
				return this._ExemptFromAuto;
			}
			set
			{
				if ((this._ExemptFromAuto != value))
				{
					this.OnExemptFromAutoChanging(value);
					this.SendPropertyChanging();
					this._ExemptFromAuto = value;
					this.SendPropertyChanged("ExemptFromAuto");
					this.OnExemptFromAutoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PerOccurance", DbType="Bit")]
		public System.Nullable<bool> PerOccurance
		{
			get
			{
				return this._PerOccurance;
			}
			set
			{
				if ((this._PerOccurance != value))
				{
					this.OnPerOccuranceChanging(value);
					this.SendPropertyChanging();
					this._PerOccurance = value;
					this.SendPropertyChanged("PerOccurance");
					this.OnPerOccuranceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductsCompletedOps", DbType="Bit")]
		public System.Nullable<bool> ProductsCompletedOps
		{
			get
			{
				return this._ProductsCompletedOps;
			}
			set
			{
				if ((this._ProductsCompletedOps != value))
				{
					this.OnProductsCompletedOpsChanging(value);
					this.SendPropertyChanging();
					this._ProductsCompletedOps = value;
					this.SendPropertyChanged("ProductsCompletedOps");
					this.OnProductsCompletedOpsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NonOwnedAuto", DbType="Int")]
		public System.Nullable<int> NonOwnedAuto
		{
			get
			{
				return this._NonOwnedAuto;
			}
			set
			{
				if ((this._NonOwnedAuto != value))
				{
					if (this._InsuranceNonOwnedAuto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNonOwnedAutoChanging(value);
					this.SendPropertyChanging();
					this._NonOwnedAuto = value;
					this.SendPropertyChanged("NonOwnedAuto");
					this.OnNonOwnedAutoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrossLiability", DbType="Bit")]
		public System.Nullable<bool> CrossLiability
		{
			get
			{
				return this._CrossLiability;
			}
			set
			{
				if ((this._CrossLiability != value))
				{
					this.OnCrossLiabilityChanging(value);
					this.SendPropertyChanging();
					this._CrossLiability = value;
					this.SendPropertyChanged("CrossLiability");
					this.OnCrossLiabilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NCasAddIns", DbType="Bit")]
		public System.Nullable<bool> NCasAddIns
		{
			get
			{
				return this._NCasAddIns;
			}
			set
			{
				if ((this._NCasAddIns != value))
				{
					this.OnNCasAddInsChanging(value);
					this.SendPropertyChanging();
					this._NCasAddIns = value;
					this.SendPropertyChanged("NCasAddIns");
					this.OnNCasAddInsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PolicyNumber", DbType="NVarChar(50)")]
		public string PolicyNumber
		{
			get
			{
				return this._PolicyNumber;
			}
			set
			{
				if ((this._PolicyNumber != value))
				{
					this.OnPolicyNumberChanging(value);
					this.SendPropertyChanging();
					this._PolicyNumber = value;
					this.SendPropertyChanged("PolicyNumber");
					this.OnPolicyNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PolicyLimit", DbType="Int")]
		public System.Nullable<int> PolicyLimit
		{
			get
			{
				return this._PolicyLimit;
			}
			set
			{
				if ((this._PolicyLimit != value))
				{
					if (this._PolicyLimit1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPolicyLimitChanging(value);
					this.SendPropertyChanging();
					this._PolicyLimit = value;
					this.SendPropertyChanged("PolicyLimit");
					this.OnPolicyLimitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PolicyLimitOther", DbType="NChar(10)")]
		public string PolicyLimitOther
		{
			get
			{
				return this._PolicyLimitOther;
			}
			set
			{
				if ((this._PolicyLimitOther != value))
				{
					this.OnPolicyLimitOtherChanging(value);
					this.SendPropertyChanging();
					this._PolicyLimitOther = value;
					this.SendPropertyChanged("PolicyLimitOther");
					this.OnPolicyLimitOtherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpiryDate", DbType="Date")]
		public System.Nullable<System.DateTime> ExpiryDate
		{
			get
			{
				return this._ExpiryDate;
			}
			set
			{
				if ((this._ExpiryDate != value))
				{
					this.OnExpiryDateChanging(value);
					this.SendPropertyChanging();
					this._ExpiryDate = value;
					this.SendPropertyChanged("ExpiryDate");
					this.OnExpiryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceCompany", DbType="NVarChar(255)")]
		public string InsuranceCompany
		{
			get
			{
				return this._InsuranceCompany;
			}
			set
			{
				if ((this._InsuranceCompany != value))
				{
					this.OnInsuranceCompanyChanging(value);
					this.SendPropertyChanging();
					this._InsuranceCompany = value;
					this.SendPropertyChanged("InsuranceCompany");
					this.OnInsuranceCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_insID", DbType="Int")]
		public System.Nullable<int> insID
		{
			get
			{
				return this._insID;
			}
			set
			{
				if ((this._insID != value))
				{
					if (this._InsuranceCompany1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OninsIDChanging(value);
					this.SendPropertyChanging();
					this._insID = value;
					this.SendPropertyChanged("insID");
					this.OninsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(255)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsEmail", DbType="NVarChar(100)")]
		public string InsEmail
		{
			get
			{
				return this._InsEmail;
			}
			set
			{
				if ((this._InsEmail != value))
				{
					this.OnInsEmailChanging(value);
					this.SendPropertyChanging();
					this._InsEmail = value;
					this.SendPropertyChanged("InsEmail");
					this.OnInsEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrokerName", DbType="NVarChar(255)")]
		public string BrokerName
		{
			get
			{
				return this._BrokerName;
			}
			set
			{
				if ((this._BrokerName != value))
				{
					this.OnBrokerNameChanging(value);
					this.SendPropertyChanging();
					this._BrokerName = value;
					this.SendPropertyChanged("BrokerName");
					this.OnBrokerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrokerID", DbType="Int")]
		public System.Nullable<int> BrokerID
		{
			get
			{
				return this._BrokerID;
			}
			set
			{
				if ((this._BrokerID != value))
				{
					if (this._InsuranceBroker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBrokerIDChanging(value);
					this.SendPropertyChanging();
					this._BrokerID = value;
					this.SendPropertyChanged("BrokerID");
					this.OnBrokerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrokerEmailID", DbType="Int")]
		public System.Nullable<int> BrokerEmailID
		{
			get
			{
				return this._BrokerEmailID;
			}
			set
			{
				if ((this._BrokerEmailID != value))
				{
					if (this._InsuranceBrokerEmail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBrokerEmailIDChanging(value);
					this.SendPropertyChanging();
					this._BrokerEmailID = value;
					this.SendPropertyChanged("BrokerEmailID");
					this.OnBrokerEmailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrokerAddress", DbType="NVarChar(255)")]
		public string BrokerAddress
		{
			get
			{
				return this._BrokerAddress;
			}
			set
			{
				if ((this._BrokerAddress != value))
				{
					this.OnBrokerAddressChanging(value);
					this.SendPropertyChanging();
					this._BrokerAddress = value;
					this.SendPropertyChanged("BrokerAddress");
					this.OnBrokerAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrokerEmail", DbType="NVarChar(100)")]
		public string BrokerEmail
		{
			get
			{
				return this._BrokerEmail;
			}
			set
			{
				if ((this._BrokerEmail != value))
				{
					this.OnBrokerEmailChanging(value);
					this.SendPropertyChanging();
					this._BrokerEmail = value;
					this.SendPropertyChanged("BrokerEmail");
					this.OnBrokerEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CertSigned", DbType="Bit")]
		public System.Nullable<bool> CertSigned
		{
			get
			{
				return this._CertSigned;
			}
			set
			{
				if ((this._CertSigned != value))
				{
					this.OnCertSignedChanging(value);
					this.SendPropertyChanging();
					this._CertSigned = value;
					this.SendPropertyChanged("CertSigned");
					this.OnCertSignedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantsLegalLiability", DbType="Bit")]
		public System.Nullable<bool> TenantsLegalLiability
		{
			get
			{
				return this._TenantsLegalLiability;
			}
			set
			{
				if ((this._TenantsLegalLiability != value))
				{
					this.OnTenantsLegalLiabilityChanging(value);
					this.SendPropertyChanging();
					this._TenantsLegalLiability = value;
					this.SendPropertyChanged("TenantsLegalLiability");
					this.OnTenantsLegalLiabilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InsuranceBroker_InsurancePolicy", Storage="_InsuranceBroker", ThisKey="BrokerID", OtherKey="ID", IsForeignKey=true)]
		public InsuranceBroker InsuranceBroker
		{
			get
			{
				return this._InsuranceBroker.Entity;
			}
			set
			{
				InsuranceBroker previousValue = this._InsuranceBroker.Entity;
				if (((previousValue != value) 
							|| (this._InsuranceBroker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InsuranceBroker.Entity = null;
						previousValue.InsurancePolicies.Remove(this);
					}
					this._InsuranceBroker.Entity = value;
					if ((value != null))
					{
						value.InsurancePolicies.Add(this);
						this._BrokerID = value.ID;
					}
					else
					{
						this._BrokerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("InsuranceBroker");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InsuranceBrokerEmail_InsurancePolicy", Storage="_InsuranceBrokerEmail", ThisKey="BrokerEmailID", OtherKey="ID", IsForeignKey=true)]
		public InsuranceBrokerEmail InsuranceBrokerEmail
		{
			get
			{
				return this._InsuranceBrokerEmail.Entity;
			}
			set
			{
				InsuranceBrokerEmail previousValue = this._InsuranceBrokerEmail.Entity;
				if (((previousValue != value) 
							|| (this._InsuranceBrokerEmail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InsuranceBrokerEmail.Entity = null;
						previousValue.InsurancePolicies.Remove(this);
					}
					this._InsuranceBrokerEmail.Entity = value;
					if ((value != null))
					{
						value.InsurancePolicies.Add(this);
						this._BrokerEmailID = value.ID;
					}
					else
					{
						this._BrokerEmailID = default(Nullable<int>);
					}
					this.SendPropertyChanged("InsuranceBrokerEmail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InsuranceCompany_InsurancePolicy", Storage="_InsuranceCompany1", ThisKey="insID", OtherKey="ID", IsForeignKey=true)]
		public InsuranceCompany InsuranceCompany1
		{
			get
			{
				return this._InsuranceCompany1.Entity;
			}
			set
			{
				InsuranceCompany previousValue = this._InsuranceCompany1.Entity;
				if (((previousValue != value) 
							|| (this._InsuranceCompany1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InsuranceCompany1.Entity = null;
						previousValue.InsurancePolicies.Remove(this);
					}
					this._InsuranceCompany1.Entity = value;
					if ((value != null))
					{
						value.InsurancePolicies.Add(this);
						this._insID = value.ID;
					}
					else
					{
						this._insID = default(Nullable<int>);
					}
					this.SendPropertyChanged("InsuranceCompany1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PolicyLimit_InsurancePolicy", Storage="_PolicyLimit1", ThisKey="PolicyLimit", OtherKey="ID", IsForeignKey=true)]
		public PolicyLimit PolicyLimit1
		{
			get
			{
				return this._PolicyLimit1.Entity;
			}
			set
			{
				PolicyLimit previousValue = this._PolicyLimit1.Entity;
				if (((previousValue != value) 
							|| (this._PolicyLimit1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PolicyLimit1.Entity = null;
						previousValue.InsurancePolicies.Remove(this);
					}
					this._PolicyLimit1.Entity = value;
					if ((value != null))
					{
						value.InsurancePolicies.Add(this);
						this._PolicyLimit = value.ID;
					}
					else
					{
						this._PolicyLimit = default(Nullable<int>);
					}
					this.SendPropertyChanged("PolicyLimit1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeOfPolicy_InsurancePolicy", Storage="_TypeOfPolicy1", ThisKey="TypeOfPolicy", OtherKey="ID", IsForeignKey=true)]
		public TypeOfPolicy TypeOfPolicy1
		{
			get
			{
				return this._TypeOfPolicy1.Entity;
			}
			set
			{
				TypeOfPolicy previousValue = this._TypeOfPolicy1.Entity;
				if (((previousValue != value) 
							|| (this._TypeOfPolicy1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeOfPolicy1.Entity = null;
						previousValue.InsurancePolicies.Remove(this);
					}
					this._TypeOfPolicy1.Entity = value;
					if ((value != null))
					{
						value.InsurancePolicies.Add(this);
						this._TypeOfPolicy = value.ID;
					}
					else
					{
						this._TypeOfPolicy = default(Nullable<int>);
					}
					this.SendPropertyChanged("TypeOfPolicy1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InsuranceNonOwnedAuto_InsurancePolicy", Storage="_InsuranceNonOwnedAuto", ThisKey="NonOwnedAuto", OtherKey="ID", IsForeignKey=true)]
		public InsuranceNonOwnedAuto InsuranceNonOwnedAuto
		{
			get
			{
				return this._InsuranceNonOwnedAuto.Entity;
			}
			set
			{
				InsuranceNonOwnedAuto previousValue = this._InsuranceNonOwnedAuto.Entity;
				if (((previousValue != value) 
							|| (this._InsuranceNonOwnedAuto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InsuranceNonOwnedAuto.Entity = null;
						previousValue.InsurancePolicies.Remove(this);
					}
					this._InsuranceNonOwnedAuto.Entity = value;
					if ((value != null))
					{
						value.InsurancePolicies.Add(this);
						this._NonOwnedAuto = value.ID;
					}
					else
					{
						this._NonOwnedAuto = default(Nullable<int>);
					}
					this.SendPropertyChanged("InsuranceNonOwnedAuto");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_InsurancePolicy", Storage="_Contractor", ThisKey="cID", OtherKey="ID", IsForeignKey=true)]
		public Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				Contractor previousValue = this._Contractor.Entity;
				if (((previousValue != value) 
							|| (this._Contractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contractor.Entity = null;
						previousValue.InsurancePolicies.Remove(this);
					}
					this._Contractor.Entity = value;
					if ((value != null))
					{
						value.InsurancePolicies.Add(this);
						this._cID = value.ID;
					}
					else
					{
						this._cID = default(int);
					}
					this.SendPropertyChanged("Contractor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InsuranceNonOwnedAuto")]
	public partial class InsuranceNonOwnedAuto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Value;
		
		private bool _Active;
		
		private EntitySet<InsurancePolicy> _InsurancePolicies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public InsuranceNonOwnedAuto()
		{
			this._InsurancePolicies = new EntitySet<InsurancePolicy>(new Action<InsurancePolicy>(this.attach_InsurancePolicies), new Action<InsurancePolicy>(this.detach_InsurancePolicies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InsuranceNonOwnedAuto_InsurancePolicy", Storage="_InsurancePolicies", ThisKey="ID", OtherKey="NonOwnedAuto")]
		public EntitySet<InsurancePolicy> InsurancePolicies
		{
			get
			{
				return this._InsurancePolicies;
			}
			set
			{
				this._InsurancePolicies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InsurancePolicies(InsurancePolicy entity)
		{
			this.SendPropertyChanging();
			entity.InsuranceNonOwnedAuto = this;
		}
		
		private void detach_InsurancePolicies(InsurancePolicy entity)
		{
			this.SendPropertyChanging();
			entity.InsuranceNonOwnedAuto = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contractors")]
	public partial class Contractor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Company;
		
		private string _VendorNumber;
		
		private string _ContactName;
		
		private string _MailingAddress;
		
		private string _Town;
		
		private string _PostalCode;
		
		private string _Email;
		
		private string _NCContact;
		
		private System.Nullable<bool> _ExemptFromAuto;
		
		private string _ExemptFromAutoComments;
		
		private string _Notes;
		
		private EntitySet<ContractorsPhone> _ContractorsPhones;
		
		private EntitySet<Licence> _Licences;
		
		private EntitySet<Permit> _Permits;
		
		private EntitySet<Agreement> _Agreements;
		
		private EntitySet<InsurancePolicy> _InsurancePolicies;
		
		private EntitySet<WSIB> _WSIBs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnVendorNumberChanging(string value);
    partial void OnVendorNumberChanged();
    partial void OnContactNameChanging(string value);
    partial void OnContactNameChanged();
    partial void OnMailingAddressChanging(string value);
    partial void OnMailingAddressChanged();
    partial void OnTownChanging(string value);
    partial void OnTownChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnNCContactChanging(string value);
    partial void OnNCContactChanged();
    partial void OnExemptFromAutoChanging(System.Nullable<bool> value);
    partial void OnExemptFromAutoChanged();
    partial void OnExemptFromAutoCommentsChanging(string value);
    partial void OnExemptFromAutoCommentsChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public Contractor()
		{
			this._ContractorsPhones = new EntitySet<ContractorsPhone>(new Action<ContractorsPhone>(this.attach_ContractorsPhones), new Action<ContractorsPhone>(this.detach_ContractorsPhones));
			this._Licences = new EntitySet<Licence>(new Action<Licence>(this.attach_Licences), new Action<Licence>(this.detach_Licences));
			this._Permits = new EntitySet<Permit>(new Action<Permit>(this.attach_Permits), new Action<Permit>(this.detach_Permits));
			this._Agreements = new EntitySet<Agreement>(new Action<Agreement>(this.attach_Agreements), new Action<Agreement>(this.detach_Agreements));
			this._InsurancePolicies = new EntitySet<InsurancePolicy>(new Action<InsurancePolicy>(this.attach_InsurancePolicies), new Action<InsurancePolicy>(this.detach_InsurancePolicies));
			this._WSIBs = new EntitySet<WSIB>(new Action<WSIB>(this.attach_WSIBs), new Action<WSIB>(this.detach_WSIBs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorNumber", DbType="NVarChar(50)")]
		public string VendorNumber
		{
			get
			{
				return this._VendorNumber;
			}
			set
			{
				if ((this._VendorNumber != value))
				{
					this.OnVendorNumberChanging(value);
					this.SendPropertyChanging();
					this._VendorNumber = value;
					this.SendPropertyChanged("VendorNumber");
					this.OnVendorNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactName", DbType="NVarChar(100)")]
		public string ContactName
		{
			get
			{
				return this._ContactName;
			}
			set
			{
				if ((this._ContactName != value))
				{
					this.OnContactNameChanging(value);
					this.SendPropertyChanging();
					this._ContactName = value;
					this.SendPropertyChanged("ContactName");
					this.OnContactNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MailingAddress", DbType="NVarChar(255)")]
		public string MailingAddress
		{
			get
			{
				return this._MailingAddress;
			}
			set
			{
				if ((this._MailingAddress != value))
				{
					this.OnMailingAddressChanging(value);
					this.SendPropertyChanging();
					this._MailingAddress = value;
					this.SendPropertyChanged("MailingAddress");
					this.OnMailingAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Town", DbType="NVarChar(50)")]
		public string Town
		{
			get
			{
				return this._Town;
			}
			set
			{
				if ((this._Town != value))
				{
					this.OnTownChanging(value);
					this.SendPropertyChanging();
					this._Town = value;
					this.SendPropertyChanged("Town");
					this.OnTownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostalCode", DbType="NVarChar(10)")]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(255)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NCContact", DbType="NVarChar(100)")]
		public string NCContact
		{
			get
			{
				return this._NCContact;
			}
			set
			{
				if ((this._NCContact != value))
				{
					this.OnNCContactChanging(value);
					this.SendPropertyChanging();
					this._NCContact = value;
					this.SendPropertyChanged("NCContact");
					this.OnNCContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExemptFromAuto", DbType="Bit")]
		public System.Nullable<bool> ExemptFromAuto
		{
			get
			{
				return this._ExemptFromAuto;
			}
			set
			{
				if ((this._ExemptFromAuto != value))
				{
					this.OnExemptFromAutoChanging(value);
					this.SendPropertyChanging();
					this._ExemptFromAuto = value;
					this.SendPropertyChanged("ExemptFromAuto");
					this.OnExemptFromAutoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExemptFromAutoComments", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string ExemptFromAutoComments
		{
			get
			{
				return this._ExemptFromAutoComments;
			}
			set
			{
				if ((this._ExemptFromAutoComments != value))
				{
					this.OnExemptFromAutoCommentsChanging(value);
					this.SendPropertyChanging();
					this._ExemptFromAutoComments = value;
					this.SendPropertyChanged("ExemptFromAutoComments");
					this.OnExemptFromAutoCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_ContractorsPhone", Storage="_ContractorsPhones", ThisKey="ID", OtherKey="cID")]
		public EntitySet<ContractorsPhone> ContractorsPhones
		{
			get
			{
				return this._ContractorsPhones;
			}
			set
			{
				this._ContractorsPhones.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_Licence", Storage="_Licences", ThisKey="ID", OtherKey="cID")]
		public EntitySet<Licence> Licences
		{
			get
			{
				return this._Licences;
			}
			set
			{
				this._Licences.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_Permit", Storage="_Permits", ThisKey="ID", OtherKey="cID")]
		public EntitySet<Permit> Permits
		{
			get
			{
				return this._Permits;
			}
			set
			{
				this._Permits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_Agreement", Storage="_Agreements", ThisKey="ID", OtherKey="cID")]
		public EntitySet<Agreement> Agreements
		{
			get
			{
				return this._Agreements;
			}
			set
			{
				this._Agreements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_InsurancePolicy", Storage="_InsurancePolicies", ThisKey="ID", OtherKey="cID")]
		public EntitySet<InsurancePolicy> InsurancePolicies
		{
			get
			{
				return this._InsurancePolicies;
			}
			set
			{
				this._InsurancePolicies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_WSIB", Storage="_WSIBs", ThisKey="ID", OtherKey="cID")]
		public EntitySet<WSIB> WSIBs
		{
			get
			{
				return this._WSIBs;
			}
			set
			{
				this._WSIBs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContractorsPhones(ContractorsPhone entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = this;
		}
		
		private void detach_ContractorsPhones(ContractorsPhone entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = null;
		}
		
		private void attach_Licences(Licence entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = this;
		}
		
		private void detach_Licences(Licence entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = null;
		}
		
		private void attach_Permits(Permit entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = this;
		}
		
		private void detach_Permits(Permit entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = null;
		}
		
		private void attach_Agreements(Agreement entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = this;
		}
		
		private void detach_Agreements(Agreement entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = null;
		}
		
		private void attach_InsurancePolicies(InsurancePolicy entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = this;
		}
		
		private void detach_InsurancePolicies(InsurancePolicy entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = null;
		}
		
		private void attach_WSIBs(WSIB entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = this;
		}
		
		private void detach_WSIBs(WSIB entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WSIB")]
	public partial class WSIB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _cID;
		
		private System.Nullable<int> _WSIBCoverage;
		
		private System.Nullable<bool> _WSIBCertRecd;
		
		private System.Nullable<bool> _IndOpLetterRecd;
		
		private string _IndOpIDNum;
		
		private System.Nullable<bool> _WSIBExemptFormRecd;
		
		private System.Nullable<bool> _AODAFormSubmit;
		
		private System.Nullable<bool> _AODAStandardsCompliance;
		
		private System.Nullable<bool> _NCHSPolicyReqd;
		
		private System.Nullable<bool> _NCHSPolicyRecd;
		
		private string _MoL100Recd;
		
		private string _HSPolicy;
		
		private EntityRef<Contractor> _Contractor;
		
		private EntityRef<TypeOfWSIB> _TypeOfWSIB;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OncIDChanging(System.Nullable<int> value);
    partial void OncIDChanged();
    partial void OnWSIBCoverageChanging(System.Nullable<int> value);
    partial void OnWSIBCoverageChanged();
    partial void OnWSIBCertRecdChanging(System.Nullable<bool> value);
    partial void OnWSIBCertRecdChanged();
    partial void OnIndOpLetterRecdChanging(System.Nullable<bool> value);
    partial void OnIndOpLetterRecdChanged();
    partial void OnIndOpIDNumChanging(string value);
    partial void OnIndOpIDNumChanged();
    partial void OnWSIBExemptFormRecdChanging(System.Nullable<bool> value);
    partial void OnWSIBExemptFormRecdChanged();
    partial void OnAODAFormSubmitChanging(System.Nullable<bool> value);
    partial void OnAODAFormSubmitChanged();
    partial void OnAODAStandardsComplianceChanging(System.Nullable<bool> value);
    partial void OnAODAStandardsComplianceChanged();
    partial void OnNCHSPolicyReqdChanging(System.Nullable<bool> value);
    partial void OnNCHSPolicyReqdChanged();
    partial void OnNCHSPolicyRecdChanging(System.Nullable<bool> value);
    partial void OnNCHSPolicyRecdChanged();
    partial void OnMoL100RecdChanging(string value);
    partial void OnMoL100RecdChanged();
    partial void OnHSPolicyChanging(string value);
    partial void OnHSPolicyChanged();
    #endregion
		
		public WSIB()
		{
			this._Contractor = default(EntityRef<Contractor>);
			this._TypeOfWSIB = default(EntityRef<TypeOfWSIB>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cID", DbType="Int")]
		public System.Nullable<int> cID
		{
			get
			{
				return this._cID;
			}
			set
			{
				if ((this._cID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncIDChanging(value);
					this.SendPropertyChanging();
					this._cID = value;
					this.SendPropertyChanged("cID");
					this.OncIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WSIBCoverage", DbType="Int")]
		public System.Nullable<int> WSIBCoverage
		{
			get
			{
				return this._WSIBCoverage;
			}
			set
			{
				if ((this._WSIBCoverage != value))
				{
					if (this._TypeOfWSIB.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWSIBCoverageChanging(value);
					this.SendPropertyChanging();
					this._WSIBCoverage = value;
					this.SendPropertyChanged("WSIBCoverage");
					this.OnWSIBCoverageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WSIBCertRecd", DbType="Bit")]
		public System.Nullable<bool> WSIBCertRecd
		{
			get
			{
				return this._WSIBCertRecd;
			}
			set
			{
				if ((this._WSIBCertRecd != value))
				{
					this.OnWSIBCertRecdChanging(value);
					this.SendPropertyChanging();
					this._WSIBCertRecd = value;
					this.SendPropertyChanged("WSIBCertRecd");
					this.OnWSIBCertRecdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndOpLetterRecd", DbType="Bit")]
		public System.Nullable<bool> IndOpLetterRecd
		{
			get
			{
				return this._IndOpLetterRecd;
			}
			set
			{
				if ((this._IndOpLetterRecd != value))
				{
					this.OnIndOpLetterRecdChanging(value);
					this.SendPropertyChanging();
					this._IndOpLetterRecd = value;
					this.SendPropertyChanged("IndOpLetterRecd");
					this.OnIndOpLetterRecdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndOpIDNum", DbType="NVarChar(25)")]
		public string IndOpIDNum
		{
			get
			{
				return this._IndOpIDNum;
			}
			set
			{
				if ((this._IndOpIDNum != value))
				{
					this.OnIndOpIDNumChanging(value);
					this.SendPropertyChanging();
					this._IndOpIDNum = value;
					this.SendPropertyChanged("IndOpIDNum");
					this.OnIndOpIDNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WSIBExemptFormRecd", DbType="Bit")]
		public System.Nullable<bool> WSIBExemptFormRecd
		{
			get
			{
				return this._WSIBExemptFormRecd;
			}
			set
			{
				if ((this._WSIBExemptFormRecd != value))
				{
					this.OnWSIBExemptFormRecdChanging(value);
					this.SendPropertyChanging();
					this._WSIBExemptFormRecd = value;
					this.SendPropertyChanged("WSIBExemptFormRecd");
					this.OnWSIBExemptFormRecdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AODAFormSubmit", DbType="Bit")]
		public System.Nullable<bool> AODAFormSubmit
		{
			get
			{
				return this._AODAFormSubmit;
			}
			set
			{
				if ((this._AODAFormSubmit != value))
				{
					this.OnAODAFormSubmitChanging(value);
					this.SendPropertyChanging();
					this._AODAFormSubmit = value;
					this.SendPropertyChanged("AODAFormSubmit");
					this.OnAODAFormSubmitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AODAStandardsCompliance", DbType="Bit")]
		public System.Nullable<bool> AODAStandardsCompliance
		{
			get
			{
				return this._AODAStandardsCompliance;
			}
			set
			{
				if ((this._AODAStandardsCompliance != value))
				{
					this.OnAODAStandardsComplianceChanging(value);
					this.SendPropertyChanging();
					this._AODAStandardsCompliance = value;
					this.SendPropertyChanged("AODAStandardsCompliance");
					this.OnAODAStandardsComplianceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NCHSPolicyReqd", DbType="Bit")]
		public System.Nullable<bool> NCHSPolicyReqd
		{
			get
			{
				return this._NCHSPolicyReqd;
			}
			set
			{
				if ((this._NCHSPolicyReqd != value))
				{
					this.OnNCHSPolicyReqdChanging(value);
					this.SendPropertyChanging();
					this._NCHSPolicyReqd = value;
					this.SendPropertyChanged("NCHSPolicyReqd");
					this.OnNCHSPolicyReqdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NCHSPolicyRecd", DbType="Bit")]
		public System.Nullable<bool> NCHSPolicyRecd
		{
			get
			{
				return this._NCHSPolicyRecd;
			}
			set
			{
				if ((this._NCHSPolicyRecd != value))
				{
					this.OnNCHSPolicyRecdChanging(value);
					this.SendPropertyChanging();
					this._NCHSPolicyRecd = value;
					this.SendPropertyChanged("NCHSPolicyRecd");
					this.OnNCHSPolicyRecdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoL100Recd", DbType="NVarChar(3)")]
		public string MoL100Recd
		{
			get
			{
				return this._MoL100Recd;
			}
			set
			{
				if ((this._MoL100Recd != value))
				{
					this.OnMoL100RecdChanging(value);
					this.SendPropertyChanging();
					this._MoL100Recd = value;
					this.SendPropertyChanged("MoL100Recd");
					this.OnMoL100RecdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HSPolicy", DbType="NVarChar(3)")]
		public string HSPolicy
		{
			get
			{
				return this._HSPolicy;
			}
			set
			{
				if ((this._HSPolicy != value))
				{
					this.OnHSPolicyChanging(value);
					this.SendPropertyChanging();
					this._HSPolicy = value;
					this.SendPropertyChanged("HSPolicy");
					this.OnHSPolicyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_WSIB", Storage="_Contractor", ThisKey="cID", OtherKey="ID", IsForeignKey=true)]
		public Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				Contractor previousValue = this._Contractor.Entity;
				if (((previousValue != value) 
							|| (this._Contractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contractor.Entity = null;
						previousValue.WSIBs.Remove(this);
					}
					this._Contractor.Entity = value;
					if ((value != null))
					{
						value.WSIBs.Add(this);
						this._cID = value.ID;
					}
					else
					{
						this._cID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contractor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeOfWSIB_WSIB", Storage="_TypeOfWSIB", ThisKey="WSIBCoverage", OtherKey="ID", IsForeignKey=true)]
		public TypeOfWSIB TypeOfWSIB
		{
			get
			{
				return this._TypeOfWSIB.Entity;
			}
			set
			{
				TypeOfWSIB previousValue = this._TypeOfWSIB.Entity;
				if (((previousValue != value) 
							|| (this._TypeOfWSIB.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeOfWSIB.Entity = null;
						previousValue.WSIBs.Remove(this);
					}
					this._TypeOfWSIB.Entity = value;
					if ((value != null))
					{
						value.WSIBs.Add(this);
						this._WSIBCoverage = value.ID;
					}
					else
					{
						this._WSIBCoverage = default(Nullable<int>);
					}
					this.SendPropertyChanged("TypeOfWSIB");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AvailableContractors")]
	public partial class AvailableContractor
	{
		
		private int _ID;
		
		private string _Company;
		
		private string _VendorNumber;
		
		private string _Town;
		
		private string _Email;
		
		private System.Nullable<int> _HasValidCGL;
		
		private System.Nullable<int> _HasHSPolicy;
		
		private System.Nullable<int> _HasAODA;
		
		private System.Nullable<int> _ValidWSIB;
		
		private System.Nullable<int> _ValidAuto;
		
		private System.Nullable<int> _HSPolicyNotReqd;
		
		private System.Nullable<bool> _ExemptFromAuto;
		
		private string _ContactName;
		
		private string _PostalCode;
		
		public AvailableContractor()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this._Company = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorNumber", DbType="NVarChar(50)")]
		public string VendorNumber
		{
			get
			{
				return this._VendorNumber;
			}
			set
			{
				if ((this._VendorNumber != value))
				{
					this._VendorNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Town", DbType="NVarChar(50)")]
		public string Town
		{
			get
			{
				return this._Town;
			}
			set
			{
				if ((this._Town != value))
				{
					this._Town = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(255)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this._Email = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasValidCGL", DbType="Int")]
		public System.Nullable<int> HasValidCGL
		{
			get
			{
				return this._HasValidCGL;
			}
			set
			{
				if ((this._HasValidCGL != value))
				{
					this._HasValidCGL = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasHSPolicy", DbType="Int")]
		public System.Nullable<int> HasHSPolicy
		{
			get
			{
				return this._HasHSPolicy;
			}
			set
			{
				if ((this._HasHSPolicy != value))
				{
					this._HasHSPolicy = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasAODA", DbType="Int")]
		public System.Nullable<int> HasAODA
		{
			get
			{
				return this._HasAODA;
			}
			set
			{
				if ((this._HasAODA != value))
				{
					this._HasAODA = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidWSIB", DbType="Int")]
		public System.Nullable<int> ValidWSIB
		{
			get
			{
				return this._ValidWSIB;
			}
			set
			{
				if ((this._ValidWSIB != value))
				{
					this._ValidWSIB = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidAuto", DbType="Int")]
		public System.Nullable<int> ValidAuto
		{
			get
			{
				return this._ValidAuto;
			}
			set
			{
				if ((this._ValidAuto != value))
				{
					this._ValidAuto = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HSPolicyNotReqd", DbType="Int")]
		public System.Nullable<int> HSPolicyNotReqd
		{
			get
			{
				return this._HSPolicyNotReqd;
			}
			set
			{
				if ((this._HSPolicyNotReqd != value))
				{
					this._HSPolicyNotReqd = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExemptFromAuto", DbType="Bit")]
		public System.Nullable<bool> ExemptFromAuto
		{
			get
			{
				return this._ExemptFromAuto;
			}
			set
			{
				if ((this._ExemptFromAuto != value))
				{
					this._ExemptFromAuto = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactName", DbType="NVarChar(100)")]
		public string ContactName
		{
			get
			{
				return this._ContactName;
			}
			set
			{
				if ((this._ContactName != value))
				{
					this._ContactName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostalCode", DbType="NVarChar(10)")]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this._PostalCode = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
